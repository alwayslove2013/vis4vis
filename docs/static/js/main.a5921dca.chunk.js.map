{"version":3,"sources":["logo.svg","Views/UnitBlock/index.js","Views/UnitView/index.js","Components/Header/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","UnitBlock","unitBlock","handleClick","sort","a","b","className","map","unit","key","count","doi","Unit","style","opacity","id","onClick","UnitView","data","console","log","visTypeList","yearList","i","push","gridData","forEach","visType","year","d","type","Fragment","ColHeader","Header","title","affliation","App","React","useState","setData","useEffect","d3","dd","getData","refNet","citedNet","clickDoi","refs","citeds","split","replaceAll","ref","classed","cited","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a5921dca.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport \"./index.scss\";\n\nexport const UnitBlock = ({ unitBlock, handleClick }) => {\n  const countAttr = \"CitationCount\";\n  unitBlock.sort((a, b) => b[countAttr] - a[countAttr]);\n  return (\n    <div className=\"unit-block-container\">\n      {unitBlock.map((unit) => (\n        <Unit key={unit[\"Title\"]} count={unit[countAttr]} doi={unit['DOI']} handleClick={handleClick}/>\n      ))}\n    </div>\n  );\n};\n\nexport const Unit = ({ count, doi, handleClick }) => {\n  const style = {\n    opacity: count > 70 ? 0.8 : count / 100 + 0.1,\n  };\n  return <div className=\"unit\" id={`unit-${doi}`} style={style} onClick={() => handleClick(doi)} />;\n};\n","import React from \"react\";\nimport \"./index.scss\";\nimport { UnitBlock } from \"../UnitBlock\";\nimport * as d3 from \"d3\";\n\nexport const UnitView = ({ data, handleClick }) => {\n  console.log(\"data\", data);\n  const visTypeList = [\"InfoVis\", \"VAST\", \"SciVis\"];\n  const beginYear = 1990;\n  const endYear = 2019;\n  const yearList = [];\n  for (let i = endYear; i >= beginYear; i--) {\n    yearList.push(i);\n  }\n  const gridData = {};\n  visTypeList.forEach((visType) => {\n    gridData[visType] = {};\n    yearList.forEach((year) => {\n      gridData[visType][year] = [];\n    });\n  });\n  data.forEach((d) => {\n    console.log(\"d\", d);\n    const type = d[\"Conference\"] === \"Vis\" ? \"SciVis\" : d[\"Conference\"];\n    const year = d[\"Year\"];\n    console.log(type, year, gridData);\n    gridData[type][year].push(d);\n  });\n  console.log(\"gridData\", gridData);\n  \n  return (\n    <div className=\"unit-view-container\">\n      <div className=\"blank\"></div>\n      {yearList.map((year) => (\n        <ColHeader key={year} year={year} />\n      ))}\n      {visTypeList.map((visType) => (\n        <React.Fragment key={visType}>\n          <div className=\"row-header\">{visType}</div>\n          {yearList.map((year) => (\n            <UnitBlock\n              key={visType + year}\n              unitBlock={gridData[visType][year]}\n              handleClick={handleClick}\n            />\n          ))}\n        </React.Fragment>\n      ))}\n    </div>\n  );\n};\n\nexport const ColHeader = ({ year }) => {\n  return <div className=\"col-header\">{year}</div>;\n};\n","import React from \"react\";\nimport './index.scss'\n\nexport const Header = ({title, affliation}) => {\n  return (\n    <div className=\"header\">\n      <div className=\"title\">{title}</div>\n      <div className=\"title\">{affliation}</div>\n    </div>\n  )\n}\n\nexport default Header","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { UnitView } from \"./Views/UnitView\";\nimport { Header } from \"./Components/Header\";\nimport * as d3 from \"d3\";\n\nconst App = () => {\n  const [data, setData] = React.useState([]);\n  React.useEffect(() => {\n    const getData = async () => {\n      const dd = await d3.csv(\"ieee_vis_1990_2019.csv\");\n      setData(dd);\n    };\n    getData();\n  }, []);\n\n  const refNet = {};\n  const citedNet = {};\n  let clickDoi = \"\";\n  let refs = refNet[clickDoi] || [];\n  let citeds = citedNet[clickDoi] || [];\n  data.forEach((d) => {\n    const refs = d[\"InternalReferences\"].split(\";\");\n    const doi = d[\"DOI\"]\n      .replaceAll(\"/\", \"\")\n      .replaceAll(\".\", \"\")\n      .replaceAll(\"#\", \"\");\n    d[\"DOI\"] = doi;\n    refs.forEach((ref) => {\n      ref = ref.replaceAll(\"/\", \"\").replaceAll(\".\", \"\").replaceAll(\"#\", \"\");\n      if (!(doi in refNet)) {\n        refNet[doi] = [ref];\n      } else {\n        refNet[doi].push(ref);\n      }\n      if (!(ref in citedNet)) {\n        citedNet[ref] = [doi];\n      } else {\n        citedNet[ref].push(doi);\n      }\n    });\n  });\n  const handleClick = (doi) => {\n    console.log(refs, citeds);\n    d3.select(`#unit-${clickDoi}`).classed(\"selected\", false);\n    refs.forEach((ref) => {\n      d3.select(`#unit-${ref}`).classed(\"selected-ref\", false);\n    });\n    citeds.forEach((cited) => {\n      d3.select(`#unit-${cited}`).classed(\"selected-cited\", false);\n    });\n    clickDoi = doi;\n    refs = refNet[clickDoi] || [];\n    citeds = citedNet[clickDoi] || [];\n    d3.select(`#unit-${clickDoi}`).classed(\"selected\", true);\n    refs.forEach((ref) => {\n      d3.select(`#unit-${ref}`).classed(\"selected-ref\", true);\n    });\n    citeds.forEach((cited) => {\n      d3.select(`#unit-${cited}`).classed(\"selected-cited\", true);\n    });\n  };\n  const title = \"Vis for Vis - PKU Vis\";\n  const affliation = \"\";\n  return (\n    <div className=\"App\">\n      <div className=\"HeaderContainer\">\n        <Header title={title} affliation={affliation} />\n      </div>\n      <UnitView data={data} handleClick={handleClick} />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport * as d3 from 'd3'\n\nwindow.d3 = d3\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}