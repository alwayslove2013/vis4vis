{"version":3,"sources":["logo.svg","Views/UnitBlock/index.js","Views/UnitView/index.js","Components/Header/index.js","Views/DetailView/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","UnitBlock","unitBlock","handleClick","sort","a","b","className","map","unit","key","title","count","doi","Unit","style","opacity","id","onClick","UnitView","data","visTypeList","yearList","i","push","gridData","forEach","visType","year","d","type","Fragment","ColHeader","Header","affliation","Title","Typography","Text","Paragraph","Option","Select","DetailView","selectedPaper","console","log","React","useState","comment","setComment","authors","children","tag","level","direction","split","join","EditOutlined","size","mode","width","placeholder","onChange","value","editable","icon","tooltip","maxLength","autoSize","maxRows","minRows","ellipsis","rows","expandable","symbol","App","setData","selected","setSelected","useEffect","d3","dd","getData","useMemo","doi2paper","refNet","citedNet","refs","replaceAll","ref","citeds","classed","cited","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f315b5fb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport \"./index.scss\";\n\nexport const UnitBlock = ({ unitBlock, handleClick }) => {\n  const countAttr = \"CitationCount\";\n  unitBlock.sort((a, b) => b[countAttr] - a[countAttr]);\n  return (\n    <div className=\"unit-block-container\">\n      {unitBlock.map((unit) => (\n        <Unit key={unit[\"Title\"]} title={unit[\"Title\"]} count={unit[countAttr]} doi={unit['DOI']} handleClick={handleClick}/>\n      ))}\n    </div>\n  );\n};\n\nexport const Unit = ({ title, count, doi, handleClick }) => {\n  const style = {\n    opacity: count > 70 ? 0.8 : count / 100 + 0.1,\n  };\n  return <div title={title} className=\"unit\" id={`unit-${doi}`} style={style} onClick={() => handleClick(doi)} />;\n};\n","import React from \"react\";\nimport \"./index.scss\";\nimport { UnitBlock } from \"../UnitBlock\";\nimport * as d3 from \"d3\";\n\nexport const UnitView = ({ data, handleClick }) => {\n  const visTypeList = [\"InfoVis\", \"VAST\", \"SciVis\"];\n  const beginYear = 1990;\n  const endYear = 2019;\n  const yearList = [];\n  for (let i = endYear; i >= beginYear; i--) {\n    yearList.push(i);\n  }\n  const gridData = {};\n  visTypeList.forEach((visType) => {\n    gridData[visType] = {};\n    yearList.forEach((year) => {\n      gridData[visType][year] = [];\n    });\n  });\n  data.forEach((d) => {\n    const type = d[\"Conference\"] === \"Vis\" ? \"SciVis\" : d[\"Conference\"];\n    const year = d[\"Year\"];\n    gridData[type][year].push(d);\n  });\n  \n  return (\n    <div className=\"unit-view-container\">\n      <div className=\"blank\"></div>\n      {yearList.map((year) => (\n        <ColHeader key={year} year={year} />\n      ))}\n      {visTypeList.map((visType) => (\n        <React.Fragment key={visType}>\n          <div className=\"row-header\">{visType}</div>\n          {yearList.map((year) => (\n            <UnitBlock\n              key={visType + year}\n              unitBlock={gridData[visType][year]}\n              handleClick={handleClick}\n            />\n          ))}\n        </React.Fragment>\n      ))}\n    </div>\n  );\n};\n\nexport const ColHeader = ({ year }) => {\n  return <div className=\"col-header\">{year}</div>;\n};\n","import React from \"react\";\nimport './index.scss'\n\nexport const Header = ({title, affliation}) => {\n  return (\n    <div className=\"header\">\n      <div className=\"title\">{title}</div>\n      <div className=\"title\">{affliation}</div>\n    </div>\n  )\n}\n\nexport default Header","import React from \"react\";\nimport \"./index.scss\";\nimport { Typography, Space, Switch, Select } from \"antd\";\nimport { EditOutlined } from \"@ant-design/icons\";\nconst { Title, Text, Paragraph } = Typography;\nconst { Option } = Select;\n\nexport const DetailView = ({ selectedPaper }) => {\n  console.log(\"selectedPaper\", selectedPaper);\n  const [comment, setComment] = React.useState(\"write something\");\n  const authors = selectedPaper[\"AuthorNames\"] || \"\";\n  const handleChange = (value) => {\n    console.log(`selected ${value}`);\n  };\n  let children = [\n    \"graph\",\n    \"network\",\n    \"trajectory\",\n    \"tree\",\n    \"data\",\n    \"volume rendering\",\n  ].map((tag) => <Option key={tag}>{tag}</Option>);\n  return (\n    <div className=\"detail-view\">\n      <Title level={4}>{selectedPaper[\"Title\"]}</Title>\n      <Space direction=\"vertical\">\n        <Text>{authors.split(\";\").join(\"; \")}</Text>\n        <Text>\n          <EditOutlined style={{ \"margin-right\": 10 }} />\n          Classic <Switch size={\"small\"} style={{ \"margin-left\": 10 }} />\n        </Text>\n        <Text>\n          <EditOutlined style={{ \"margin-right\": 10 }} />\n          Tags{\" \"}\n          <Select\n            size=\"small\"\n            mode=\"tags\"\n            style={{ width: \"60%\", \"margin-left\": 5, 'margin-top': 5 }}\n            placeholder=\"Select or Add Tags\"\n            onChange={handleChange}\n          >\n            {children}\n          </Select>\n        </Text>\n        <Text>\n          <EditOutlined style={{ \"margin-right\": 10 }} />\n          Comment\n        </Text>\n        <Paragraph\n          type=\"secondary\"\n          editable={{\n            icon: <EditOutlined />,\n            tooltip: \"click to edit text\",\n            onChange: setComment,\n            maxLength: 10000,\n            autoSize: { maxRows: 20, minRows: 3 },\n          }}\n        >\n          {comment}\n        </Paragraph>\n        {/* <Paragraph>citations: {selectedPaper[\"CitationCount\"]}</Paragraph> */}\n        <Paragraph\n          type=\"secondary\"\n          ellipsis={{ rows: 4, expandable: true, symbol: \"more\" }}\n        >\n          {selectedPaper[\"Abstract\"]}\n        </Paragraph>\n      </Space>\n    </div>\n  );\n};\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.scss\";\nimport { UnitView } from \"./Views/UnitView\";\nimport { Header } from \"./Components/Header\";\nimport * as d3 from \"d3\";\nimport { DetailView } from \"./Views/DetailView\";\n\nconst App = () => {\n  const [data, setData] = React.useState([]);\n\n  const [selected, setSelected] = React.useState(\"\");\n\n  React.useEffect(() => {\n    const getData = async () => {\n      const dd = await d3.csv(\"ieee_vis_1990_2019.csv\");\n      setData(dd);\n    };\n    getData();\n  }, []);\n\n  const { doi2paper, refNet, citedNet } = React.useMemo(() => {\n    const doi2paper = {};\n    const refNet = {};\n    const citedNet = {};\n    data.forEach((d) => {\n      const refs = d[\"InternalReferences\"].split(\";\");\n      const doi = d[\"DOI\"]\n        .replaceAll(\"/\", \"\")\n        .replaceAll(\".\", \"\")\n        .replaceAll(\"#\", \"\");\n      d[\"DOI\"] = doi;\n      doi2paper[doi] = d;\n      refs.forEach((ref) => {\n        ref = ref.replaceAll(\"/\", \"\").replaceAll(\".\", \"\").replaceAll(\"#\", \"\");\n        if (!(doi in refNet)) {\n          refNet[doi] = [ref];\n        } else {\n          refNet[doi].push(ref);\n        }\n        if (!(ref in citedNet)) {\n          citedNet[ref] = [doi];\n        } else {\n          citedNet[ref].push(doi);\n        }\n      });\n    });\n    return { doi2paper, refNet, citedNet };\n  }, [data]);\n\n  const handleClick = (doi) => {\n    console.log(\"selected\", doi);\n    if (doi !== selected) {\n      let refs = refNet[selected] || [];\n      let citeds = citedNet[selected] || [];\n      d3.select(`#unit-${selected}`).classed(\"selected\", false);\n      refs.forEach((ref) => {\n        d3.select(`#unit-${ref}`).classed(\"selected-ref\", false);\n      });\n      citeds.forEach((cited) => {\n        d3.select(`#unit-${cited}`).classed(\"selected-cited\", false);\n      });\n      refs = refNet[doi] || [];\n      citeds = citedNet[doi] || [];\n      console.log(\"after\", refs, citeds);\n      d3.select(`#unit-${doi}`).classed(\"selected\", true);\n      refs.forEach((ref) => {\n        d3.select(`#unit-${ref}`).classed(\"selected-ref\", true);\n      });\n      citeds.forEach((cited) => {\n        d3.select(`#unit-${cited}`).classed(\"selected-cited\", true);\n      });\n      setSelected(doi);\n    }\n  };\n  const title = \"Vis for Vis\";\n  const affliation = \"PKU Vis\";\n  return (\n    <div className=\"App\">\n      <div className=\"HeaderContainer\">\n        <Header title={title} affliation={affliation} />\n      </div>\n      <div className=\"ContentContainer\">\n        <div className=\"MainViewContainer\">\n          <UnitView data={data} handleClick={handleClick} />\n        </div>\n        <div className=\"DetalViewContainer\">\n          {selected !== \"\" && selected in doi2paper && (\n            <DetailView selectedPaper={doi2paper[selected]} />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport * as d3 from 'd3'\nimport zhCN from 'antd/es/locale/zh_CN';\nimport moment from 'moment';\nimport 'moment/locale/zh-cn';\nimport 'antd/dist/antd.css';\n\nwindow.d3 = d3\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}